/*
 * Copyright (C) 2014 Simon Dahlberg and Jesper Sahlin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package databasprojektet;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

/**
 *
 * @author Simon Dahlberg and Jesper Sahlin
 */
public class MainWindow extends javax.swing.JFrame
{

    private AdminWindow mAdminWindow = null;
    private String mUserName = "Gäst";
    private final String mWelcomeMsg = "Välkommen ";
    private ArrayList<Pun> mPunList = new ArrayList<>();
    private ArrayList<Pun> mPunListShown = new ArrayList<>();
    private User mActiveUser = null;

    /**
     * Creates new form MainWindow
     */
    public MainWindow()
    {
        initComponents();
        mMessageLabel.setText(mWelcomeMsg + mUserName + "!");
        InitializeCategories();
        InitializePuns();
        InitializeSlider();
        this.setLocationRelativeTo(null);
        ActionListener categoryCbActionListener = new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                String s = (String) mCategoryComboBox.getSelectedItem();
                if (s.equals("Visa alla"))
                {
                    ChangeCategoryShown();
                }
                else
                {
                    ChangeCategoryShown(s);
                }
            }
        };
        mCategoryComboBox.addActionListener(categoryCbActionListener);
    }

    private void InitializeCategories()
    {
        mCategoryComboBox.addItem("Visa alla");
        ResultSet categoriesFromDb = SQLHelper.GetResultSetFromQuery("SELECT Name from category");
        try
        {
            while (categoriesFromDb.next())
            {
                mCategoryComboBox.addItem(categoriesFromDb.getString("Name"));
            }
        }
        catch (SQLException e)
        {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mExitButton = new javax.swing.JButton();
        mCategoryComboBox = new javax.swing.JComboBox();
        jLabelCategory = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mPunContentWindow = new javax.swing.JTextArea();
        mMessageLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mPunListWindow = new javax.swing.JList();
        mRateSlider = new javax.swing.JSlider();
        mRateItButton = new javax.swing.JButton();
        mProfileButton = new javax.swing.JButton();
        mApplicationTitleLabel = new javax.swing.JLabel();
        mRatingLabel = new javax.swing.JLabel();
        mRating = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hej");
        setName("MainWindow"); // NOI18N
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        mExitButton.setText("Avsluta");
        mExitButton.setName("btnExit"); // NOI18N
        mExitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mExitButtonActionPerformed(evt);
            }
        });

        mCategoryComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mCategoryComboBoxActionPerformed(evt);
            }
        });

        jLabelCategory.setText("Kategori");

        mPunContentWindow.setEditable(false);
        mPunContentWindow.setColumns(20);
        mPunContentWindow.setLineWrap(true);
        mPunContentWindow.setRows(5);
        jScrollPane2.setViewportView(mPunContentWindow);

        mMessageLabel.setText("lblMsg");

        mPunListWindow.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        mPunListWindow.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                mPunListWindowValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(mPunListWindow);

        mRateSlider.setEnabled(false);

        mRateItButton.setText("Rate It");
        mRateItButton.setToolTipText("Logga in för att betygsätta detta skämt!");
        mRateItButton.setEnabled(false);
        mRateItButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mRateItButtonActionPerformed(evt);
            }
        });

        mProfileButton.setText("Login/Skapa profil");
        mProfileButton.setName("btnLogin"); // NOI18N
        mProfileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mProfileButtonActionPerformed(evt);
            }
        });

        mApplicationTitleLabel.setFont(new java.awt.Font("Narkisim", 1, 18)); // NOI18N
        mApplicationTitleLabel.setText("JokeGenerator");

        mRatingLabel.setText("Rating :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mApplicationTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabelCategory)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mCategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mMessageLabel)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(mRatingLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mRating)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mRateItButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(mRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mExitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mApplicationTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelCategory)
                        .addComponent(mCategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mMessageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mRatingLabel)
                    .addComponent(mRating))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mRateItButton)
                        .addComponent(mProfileButton))
                    .addComponent(mRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mExitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InitializePuns()
    {
        ResultSet punsFromDb = SQLHelper.GetResultSetFromQuery("SELECT * from pun order by Title");
        try
        {
            while (punsFromDb.next())
            {
                mPunList.add(new Pun(punsFromDb.getInt("ID"), punsFromDb.getString("Title"), punsFromDb.getString("Content"),
                        punsFromDb.getString("Category"), punsFromDb.getInt("Adder"), punsFromDb.getDate("Date")));
            }

            for (Pun p : mPunList)
            {
                ResultSet ratingFromDb = SQLHelper.GetResultSetFromQuery("SELECT * from rating where punID = " + p.GetID());
                float rating = 0.f;
                int numOfRatings = 0;
                try
                {
                    while (ratingFromDb.next())
                    {
                        rating += ratingFromDb.getInt("Rating");
                        numOfRatings++;
                    }
                }
                catch (SQLException e)
                {
                    System.out.println(e);
                }
                if (numOfRatings > 0)
                {
                    rating /= numOfRatings;
                }
                p.SetRating(rating);
            }

        }
        catch (SQLException e)
        {
            System.out.println(e);
        }
        ChangeCategoryShown();
    }

    private void ChangeCategoryShown()
    {
        mPunListShown.clear();
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (int i = 0; i < mPunList.size(); i++)
        {
            mPunListShown.add(mPunList.get(i));
            listModel.addElement(mPunList.get(i).GetTitle());
        }
        mPunListWindow.setModel(listModel);
    }

    /**
     * Updates the list of puns in the mainWindow Should be called whenever a
     * pun is added or deleted
     */
    public void UpdatePuns()
    {
        mPunList.clear();
        InitializePuns();
        mPunContentWindow.setText("");
    }

    private void InitializeSlider()
    {
        mRateSlider.setMinimum(1);
        mRateSlider.setMaximum(5);
        mRateSlider.setValue(3);
        mRateSlider.setMinorTickSpacing(1);
        mRateSlider.setPaintTicks(true);
        mRateSlider.setPaintLabels(true);
    }

    private void ChangeCategoryShown(String category)
    {
        mPunListShown.clear();
        for (Pun pun : mPunList)
        {
            if (category.equals(pun.GetCategory()))
            {
                mPunListShown.add(pun);
            }
        }

        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (Pun pun : mPunListShown)
        {
            listModel.addElement(pun.GetTitle());
        }
        mPunListWindow.setModel(listModel);
    }
    private void mExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mExitButtonActionPerformed
        System.out.println("Stopped");
        System.exit(0);
    }//GEN-LAST:event_mExitButtonActionPerformed

    private void mProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mProfileButtonActionPerformed

        if (mActiveUser != null)
        {
            UnregisterActiveUser();
        }
        else
        {
            LoginWindow login = new LoginWindow(this);
            login.setVisible(true);
        }

    }//GEN-LAST:event_mProfileButtonActionPerformed

    //Ändrar content utefter vilken titel som är vald i jList
    private void mPunListWindowValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mPunListWindowValueChanged
        if (mPunListWindow.getSelectedIndex() >= 0)
        {
            mPunContentWindow.setText(mPunListShown.get(mPunListWindow.getSelectedIndex()).GetContent());
            String ratingAsString = new String();
            ratingAsString = String.valueOf(mPunListShown.get(mPunListWindow.getSelectedIndex()).GetRating());
            mRating.setText(ratingAsString);
        }
    }//GEN-LAST:event_mPunListWindowValueChanged

    private void mRateItButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mRateItButtonActionPerformed
        ResultSet rs = SQLHelper.GetResultSetFromQuery("SELECT * FROM rating WHERE UserID = '" + mActiveUser.GetId() + "' AND PunID = '"
                + mPunListShown.get(mPunListWindow.getSelectedIndex()).GetID() + "'");
        try
        {
            if (rs.next())
            {
                SQLHelper.ExecuteUpdate("UPDATE rating SET Rating = '" + mRateSlider.getValue()
                        + "' WHERE UserID = '" + mActiveUser.GetId() + "' AND PunID = '"
                        + mPunListShown.get(mPunListWindow.getSelectedIndex()).GetID() + "'");
            }
            else
            {
                SQLHelper.ExecuteUpdate("INSERT INTO rating VALUES ('" + mActiveUser.GetId()
                        + "', '" + mPunListShown.get(mPunListWindow.getSelectedIndex()).GetID() + "', '" + mRateSlider.getValue() + "')");
            }
        }
        catch (SQLException e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_mRateItButtonActionPerformed

    private void mCategoryComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mCategoryComboBoxActionPerformed
    {//GEN-HEADEREND:event_mCategoryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mCategoryComboBoxActionPerformed

    public void UpdateUsername(String newUsername)
    {
        mUserName = newUsername;
        mMessageLabel.setText(mWelcomeMsg + mUserName + "!");
    }

    public void RegisterActiveUser(User user)
    {
        mActiveUser = user;
        UpdateUsername(mActiveUser.GetName());
        mRateItButton.setEnabled(true);
        mRateSlider.setEnabled(true);
        mRateItButton.setToolTipText("");
        if (mActiveUser.IsAdmin())
        {
            mAdminWindow = new AdminWindow(this);
            mAdminWindow.setVisible(true);

        }

        mProfileButton.setText("Logga ut");
    }

    public void UnregisterActiveUser()
    {
        mActiveUser = null;
        UpdateUsername("Gäst");
        mMessageLabel.setText(mWelcomeMsg + mUserName + "!");
        mProfileButton.setText("Login/Skapa profil");
        mRateItButton.setEnabled(false);
        mRateSlider.setEnabled(false);
        if (mAdminWindow != null)
        {
            mAdminWindow.dispose();
            mAdminWindow = null;

        }
    }

    public ArrayList<Pun> GetPunList()
    {
        return mPunList;
    }

    public User GetActiveUser()
    {
        return mActiveUser;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel mApplicationTitleLabel;
    private javax.swing.JComboBox mCategoryComboBox;
    private javax.swing.JButton mExitButton;
    private javax.swing.JLabel mMessageLabel;
    private javax.swing.JButton mProfileButton;
    private javax.swing.JTextArea mPunContentWindow;
    private javax.swing.JList mPunListWindow;
    private javax.swing.JButton mRateItButton;
    private javax.swing.JSlider mRateSlider;
    private javax.swing.JLabel mRating;
    private javax.swing.JLabel mRatingLabel;
    // End of variables declaration//GEN-END:variables
}
