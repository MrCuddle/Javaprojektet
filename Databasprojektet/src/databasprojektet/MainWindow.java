/*
 * Copyright (C) 2014 Simon Dahlberg and Jesper Sahlin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package databasprojektet;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Simon Dahlberg and Jesper Sahlin
 */
public class MainWindow extends javax.swing.JFrame
{
    
    private String userName = "Gäst";
    private String welcomeMsg = "Välkommen ";
    ArrayList<Pun> mPunList = new ArrayList<Pun>();
    ArrayList<Pun> mPunListShown = new ArrayList<Pun>();
    private User mActiveUser = null;
    /**
     * Creates new form MainWindow
     */
    public MainWindow()
    {
        initComponents();
        lblMsg.setText(welcomeMsg + userName + "!");
        InitializeCategories();
        InitializePuns();
        InitializeSlider();
        
        ActionListener categoryCbActionListener = new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                String s = (String) mCategoryComboBox.getSelectedItem();
                if(s.equals("Visa alla"))
                {
                    ChangeCategoryShown();
                }
                else
                {
                    ChangeCategoryShown(s);
                }
            }
        };
        mCategoryComboBox.addActionListener(categoryCbActionListener);
    }
    
    private void InitializeCategories()
    {
        mCategoryComboBox.addItem("Visa alla");
        ResultSet categoriesFromDb = SQLHelper.GetResultSetFromQuery("SELECT Name from category");
        try
        {
        while(categoriesFromDb.next())
            {
                mCategoryComboBox.addItem(categoriesFromDb.getString("Name"));
            }
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtStatus = new javax.swing.JEditorPane();
        btnTestSQL = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        mCategoryComboBox = new javax.swing.JComboBox();
        jLabelCategory = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mPunContentWindow = new javax.swing.JTextArea();
        lblMsg = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mPunListWindow = new javax.swing.JList();
        mRateSlider = new javax.swing.JSlider();
        mRateItButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hej");
        setName("MainWindow"); // NOI18N
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        txtStatus.setEditable(false);
        txtStatus.setName("txtStatus"); // NOI18N
        jScrollPane1.setViewportView(txtStatus);
        txtStatus.getAccessibleContext().setAccessibleName("");

        btnTestSQL.setText("TestSQL");
        btnTestSQL.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnTestSQLActionPerformed(evt);
            }
        });

        jButton1.setText("Exit");
        jButton1.setName("btnExit"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jLabelCategory.setText("Kategori");

        mPunContentWindow.setColumns(20);
        mPunContentWindow.setLineWrap(true);
        mPunContentWindow.setRows(5);
        jScrollPane2.setViewportView(mPunContentWindow);

        lblMsg.setText("lblMsg");

        mPunListWindow.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        mPunListWindow.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                mPunListWindowValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(mPunListWindow);

        mRateSlider.setEnabled(false);

        mRateItButton.setText("Rate It");
        mRateItButton.setToolTipText("Logga in för att betygsätta detta skämt!");
        mRateItButton.setEnabled(false);
        mRateItButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mRateItButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Login");
        jButton2.setName("btnLogin"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Narkisim", 1, 18)); // NOI18N
        jLabel1.setText("JokeGenerator");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelCategory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mCategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mRateItButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(mRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(119, 119, 119)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTestSQL)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblMsg)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabelCategory)
                                        .addComponent(mCategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblMsg))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(mRateItButton)
                                .addComponent(jButton2))
                            .addComponent(mRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnTestSQL, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InitializePuns()
    {
        ResultSet punsFromDb = SQLHelper.GetResultSetFromQuery("SELECT * from pun order by Title");
        try
        {
            while(punsFromDb.next())
             mPunList.add(new Pun(punsFromDb.getInt("ID"), punsFromDb.getString("Title"), punsFromDb.getString("Content")
                     , punsFromDb.getString("Category"), punsFromDb.getInt("Adder"), punsFromDb.getDate("Date")));

        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        ChangeCategoryShown();
    }
    
    private void ChangeCategoryShown()
    {
        mPunListShown.clear();
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for(int i = 0; i < mPunList.size(); i++)
        {
            mPunListShown.add(mPunList.get(i));
            listModel.addElement(mPunList.get(i).GetTitle());
        }
        mPunListWindow.setModel(listModel);
    }
    
    private void InitializeSlider()
    {
        mRateSlider.setMinimum(1);
        mRateSlider.setMaximum(5);
        mRateSlider.setValue(3);
        mRateSlider.setMinorTickSpacing(1);
        mRateSlider.setPaintTicks(true);
        mRateSlider.setPaintLabels(true);
    }
    private void ChangeCategoryShown(String category)
    {
        mPunListShown.clear();
        for (Pun pun : mPunList) 
        {
            if (category.equals(pun.GetCategory())) 
            {
                mPunListShown.add(pun);
            }
        } 
        
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for(Pun pun : mPunListShown)
        {
            listModel.addElement(pun.GetTitle());
        }
        mPunListWindow.setModel(listModel);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        LoginWindow login = new LoginWindow(this);
        login.setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnTestSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestSQLActionPerformed
        String res = JOptionPane.showInputDialog(null, "Enter SQL Query");
        if (res == null || res.equals(""))
        {
            return;
        }
        ResultSet rs = SQLHelper.GetResultSetFromQuery(res);
        if (rs == null)
        {
            SetStatusWindowText("Error executing query '" + res + "'");
            AppendStatusWindow(SQLHelper.GetStatus());
            return;
        }

        EmptyStatusWindow();

        try
        {
            ResultSetMetaData rsmd = rs.getMetaData();
            int n = 0;
            while (rs.next())
            {
                AppendStatusWindow("-----Result" + n++ + "-----");
                for (int i = 1; i < rsmd.getColumnCount(); i++)
                {
                    String out = rs.getString(i);
                    AppendStatusWindow(rsmd.getColumnName(i) + ": " + out);
                }
            }
        }
        catch (SQLException e)
        {
            System.out.println(e);
            AppendStatusWindow(e.toString());
        }
    }//GEN-LAST:event_btnTestSQLActionPerformed

    //Ändrar content utefter vilken titel som är vald i jList
    private void mPunListWindowValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mPunListWindowValueChanged
       if(mPunListWindow.getSelectedIndex() >= 0)
       {
            mPunContentWindow.setText(mPunListShown.get(mPunListWindow.getSelectedIndex()).GetContent());
       }
    }//GEN-LAST:event_mPunListWindowValueChanged

    private void mRateItButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mRateItButtonActionPerformed
        ResultSet rs = SQLHelper.GetResultSetFromQuery("SELECT * FROM rating WHERE UserID = '" + mActiveUser.GetId()+ "' AND PunID = '" 
                + mPunListShown.get(mPunListWindow.getSelectedIndex()).GetID() + "'");
        try
        {
            if(rs.next())
            {
                SQLHelper.ExecuteUpdate("UPDATE rating SET Rating = '" + mRateSlider.getValue() + 
                        "' WHERE UserID = '" + mActiveUser.GetId() + "' AND PunID = '" + 
                        mPunListShown.get(mPunListWindow.getSelectedIndex()).GetID() + "'") ;
            }
            else
            {
                SQLHelper.ExecuteUpdate("INSERT INTO rating VALUES ('" + mActiveUser.GetId() + 
                 "', '" + mPunListShown.get(mPunListWindow.getSelectedIndex()).GetID() + "', '" + mRateSlider.getValue() +"')");
            }
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_mRateItButtonActionPerformed

    public void AppendStatusWindow(String text)
    {
        if (!txtStatus.getText().equals(""))
        {
            txtStatus.setText(txtStatus.getText() + "\n" + text);
        }
        else
        {
             txtStatus.setText(text);
        }
        
    }

    public void SetStatusWindowText(String text)
    {
        txtStatus.setText(text);
    }

    public void UpdateUsername(String newUsername)
    {
        userName = newUsername;
        lblMsg.setText(welcomeMsg + userName + "!");
    }

    public void EmptyStatusWindow()
    {
        txtStatus.setText("");
    }
    
    public void RegisterUser(User user)
    {
        mActiveUser = user;
        UpdateUsername(mActiveUser.GetName());
        mRateItButton.setEnabled(true);
        mRateSlider.setEnabled(true);
        mRateItButton.setToolTipText("");
        if (mActiveUser.IsAdmin())
        {
            System.out.println("Välkommen admin");
            AdminWindow a = new AdminWindow(this);
            a.setVisible(true);
        }
    }
    
    public ArrayList<Pun> GetPunList()
    {
        return mPunList;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTestSQL;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JComboBox mCategoryComboBox;
    private javax.swing.JTextArea mPunContentWindow;
    private javax.swing.JList mPunListWindow;
    private javax.swing.JButton mRateItButton;
    private javax.swing.JSlider mRateSlider;
    private javax.swing.JEditorPane txtStatus;
    // End of variables declaration//GEN-END:variables
}
